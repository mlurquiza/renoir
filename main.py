#!/usr/bin/python

################################################################
#------------------------ Main  --------------------------------
################################################################

import sys
import os
import argparse

sys.path.append(".")

from parser     import parse_arguments
from parameters import get_param_eps, get_param_rixs
from calculate  import run_calculate_eps, run_calculate_RIXS
from plot       import plot_eps, plot_t1t2t3, plot_rixs_vs_loss, plot_rixs_map


def main():

    """
    This code calculates x-ray spectra (either XAS, XES, or RIXS) using
    input data generated by Exciting or dp.

    Usage:
    ./make_spectrum.py --calculate xas/xes/rixs [options] --inputs code input_files

    Options:
    --calculate [xas|xes|rixs]   : Type of spectrum to compute
    --oscstr [ipa|bse|from_nc]   : Method for oscillator strength XAS
    --oscstr [ipa]               : Method for oscillator strength XES
    --oscstr [from_nc|cumm|final] : Method for oscillator strength RIXS
    --w_in    <list of float>    : Incident energy for RIXS
    --lo_list <list of int>      : List of core state indices for RIXS

    Inputs:
        For XAS and XES:
            Each input group must include: eigenvectors, dipole matrix elements and eigenvalues.
            Example:
            - For Exciting:    [core_output.h5, pmat.h5, eigenvalues]
            - For dp:          [exceig.nc, rhotw.nc, eigenvalues]

        For RIXS:
            Each input group must include a file with the RIXS oscillator strength (t3)
            and a file with the absorption and emission oscillator strength (t1, t2).
            Example: [rixs.h5, data.h5]
    """


    args = parse_arguments()

    xes = (args.calculate == 'xes')


    if args.calculate == 'xas':

        oscstr = args.oscstr
        print()
        print()
        print('Calculating XAS for oscstr:', oscstr)

        vol, broad, pol, omegas, points = get_param_eps()

        print('using broadening:', broad,'and polarization:', pol+1 )
        print()
        print()

        epsM_list = []

        for command in args.inputs:
            code  = command[0]
            files = command[1:]
            print('List of files for', code, ' : ', files)

            if len(files) < 3:
                print('Calculation of the XAS spectra requires 3 files:')
                print('for dp: exceig.nc, rhotw.nc and eigenvalues')
                print('for exciting: core_output.h5, pmat.h5 and eigenvalues.')
                print()
                sys.exit(1)

            epsM_list.append(run_calculate_eps(files, code, oscstr, xes, vol, broad, omegas, points, pol))

        plot_eps (omegas, epsM_list)



    elif args.calculate == 'xes':

        oscstr = args.oscstr
        if oscstr == 'bse':
            print()
            print()
            print('WARNING: XES is only calculated for ipa, oscstr will be overwritten')
            oscstr = 'ipa'

        print()
        print()
        print('Calculating XES for oscstr', oscstr)
        print()

        # get parameters
        vol, broad, pol, omegas, points = get_param_eps()

        print('using broadening:', broad,'and polarization:', pol )
        print()
        print()

        epsM_list = []

        for command in args.inputs:
            code  = command[0]
            files = command[1:]
            print('List of files for', code, ' : ', files)

            if len(files) < 3:
                print('Calculation of the XES spectra requires 3 files')
                print('for dp: exceig.nc, rhotw.nc and eigenvalues')
                print('for exciting: exceig.nc, pmat.h5 and eigenvalues.')
                print()
                sys.exit(1)

            epsM_list.append(run_calculate_eps(files, code, oscstr, xes, vol, broad, omegas, points, pol))

        plot_eps (omegas, epsM_list)



    elif args.calculate == 'rixs':

        oscstr = args.oscstr
        print()
        print()
        print('Calculating RIXS using oscstr:', oscstr)
        print()


        ## check inputs
        if args.win_list is None:
            print('Error: --win_list must be provided for calculation of RIXS.')
            sys.exit(1)
        win_list = [float(x) for x in args.win_list]


        if oscstr == 'cumm':
            if args.lo_list is None:
                print('Error: --lo_list must be provided for the analysis of cumulative t1 t2 t3.')
                sys.exit(1)
            else:
                lo_list = [int(x) for x in args.lo_list]
        else:
            lo_list = None


        ## get parameters
        eta_o, eta_c, wloss_list, points = get_param_rixs()


        outfile_list = []
        rixs_list    = []

        for command in args.inputs:

            code  = command[0]
            files = command[1:]

            print('List of files for', code, ' : ', files)

            if len(files) < 2:
                print('Analysis of the RIXS spectra requires 2 HDF5 files:')
                print('rixs.h5 and data.h5')
                print()
                sys.exit(1)


            if oscstr == 'cumm':
                outfile = open('out_t1t2t3_'+code+'.dat', 'w+')
            elif oscstr == 'final':
                outfile = open('out_oscstr_'+code+'.dat', 'w+')
            elif oscstr == 'from_nc':
                outfile = open('out_rixs_'+code+'.dat', 'w+')

            outfile_list.append(outfile)


            rixs_list.append(run_calculate_RIXS(files, outfile, code, oscstr, eta_o, eta_c, lo_list, win_list, wloss_list))


        if oscstr == 'cumm':

            plot_t1t2t3(outfile_list, lo_list)

        elif oscstr == 'final':

            plot_rixs_vs_loss(wloss_list, win_list, rixs_list)

        elif oscstr == 'from_nc':

            plot_rixs_vs_loss(wloss_list, win_list, rixs_list)

            plot_rixs_map(wloss_list, win_list, rixs_list)


        # Close all outfiles
        for f in outfile_list:
            f.close()



if __name__ == '__main__':
    main()



